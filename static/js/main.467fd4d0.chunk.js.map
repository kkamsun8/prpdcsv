{"version":3,"sources":["File.js","FileList.js","PRPDGraph.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","text","color","File","file","readFile","console","log","fileName","name","fileData","button","onClick","className","width","maxWidth","palette","background","paper","border","padding","listItem","fontSize","FileList","data","fileList","undefined","push","map","f","h","PRPDGraph","svgRef","useRef","xScale","d3","domain","range","w","yScale","zScale","useEffect","prpdData","length","splice","prpd","_","unzip","chartData","index","buffer","j","svg","current","attr","selectAll","remove","enter","filter","d","append","style","exit","xAxis","scale","call","yAxis","ref","input","wrapper","display","App","useState","setData","setFileList","classes","type","onChange","e","target","files","id","webkitdirectory","directory","hidden","zip","JSZip","folder","generateAsync","then","blob","saveAs","fileSlice","slice","reader","FileReader","readAsArrayBuffer","onload","result","view","DataView","prpdDataRow","getUint16","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.467fd4d0.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: 'white',\r\n    },\r\n    text: {\r\n        color: \"red\",\r\n    }\r\n}))\r\n\r\nconst File = ({ file, readFile }) => {\r\n    console.log(file);\r\n    const fileName = file.name;\r\n    const fileData = file;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <li\r\n                button\r\n                onClick={() => readFile(fileData)}\r\n                className=\"text-xs hover:bg-blue-100 cursor-pointer\"\r\n            >\r\n                {fileName}\r\n            </li>\r\n            <hr />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default File\r\n","import React, { useState } from 'react'\r\nimport File from './File'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: \"1px solid\",\r\n        padding: 5\r\n    },\r\n    listItem: {\r\n        fontSize: 1,\r\n    }\r\n}));\r\n\r\nconst FileList = ({ data, readFile }) => {\r\n    console.log(data);\r\n\r\n    const fileList = [];\r\n    if (data !== undefined) {\r\n        for (const file of data) {\r\n            fileList.push(file);\r\n        }\r\n        // result = Object.keys(data).map((key) => [data[key]])\r\n        // console.log(result)\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <ul className=\"overflow-auto m-2 h-64\">\r\n                {fileList.map(f =>\r\n                    <File file={f} readFile={readFile} />)}\r\n            </ul>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default FileList\r\n","import React, { useEffect, useRef } from 'react'\r\nimport * as d3 from 'd3'\r\nimport _, { map } from 'underscore';\r\n\r\nconst w = 300;\r\nconst h = 200;\r\nconst padding = 30;\r\n\r\nconst PRPDGraph = ({ data }) => {\r\n\r\n    const svgRef = useRef();\r\n\r\n    const xScale = d3.scaleLinear()\r\n        .domain([0, 255])\r\n        .range([padding, w - padding * 2]);\r\n    const yScale = d3.scaleLinear()\r\n        .domain([0, 255])\r\n        .range([h - padding, padding]);\r\n    const zScale = d3.scaleLinear()\r\n        .domain([0, 0.8, 1.6, 8, 54.4, 80])\r\n        .range(['#fafafa', '#2f2f2f', '#999999', '#ff5f59', '#ff0000', '#ffd659'])\r\n    const rectW = w / 256;\r\n    const rectH = h / 256;\r\n\r\n    useEffect(() => {\r\n\r\n        const prpdData = [];\r\n        while (data.length) prpdData.push(data.splice(0, 256));\r\n        // console.log(`PRPDData=${prpdData}`);\r\n        const prpd = _.unzip(prpdData)\r\n\r\n        let chartData = [];\r\n\r\n        for (let index = 0; index < prpd.length; index++) {\r\n            const buffer = prpd[index];\r\n            for (let j = 0; j < prpd[index].length; j++) {\r\n                chartData.push([j, index, buffer[j]]);\r\n            }\r\n        }\r\n\r\n\r\n        const svg = d3.select(svgRef.current)\r\n            .attr('width', w)\r\n            .attr('height', h);\r\n\r\n        svg.selectAll(\"rect\")\r\n            .remove();\r\n\r\n        svg.selectAll(\"g\")\r\n            .remove();\r\n\r\n        svg.selectAll('rect')\r\n            .data(chartData)\r\n            .enter()\r\n            .filter(d => d[2] != 0)\r\n            .append(\"rect\")\r\n            .attr(\"x\", d => xScale(d[0]))\r\n            .attr(\"y\", d => yScale(d[1]))\r\n            .attr(\"width\", rectW)\r\n            .attr(\"height\", rectH)\r\n            .style(\"fill\", d => zScale(d[2]))\r\n            .exit().remove();\r\n\r\n        const xAxis = d3.axisBottom()\r\n            .scale(xScale);\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", `translate(0,${h - padding})`)\r\n            .call(xAxis)\r\n            .exit().remove();\r\n\r\n        // Y축 생성\r\n        const yAxis = d3.axisLeft()\r\n            .scale(yScale);\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", `translate(${padding},0)`)\r\n            .call(yAxis)\r\n            .exit().remove();\r\n\r\n\r\n    }, [data]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <svg className=\"flex m-4 \" ref={svgRef}>\r\n            </svg>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PRPDGraph\r\n","import { useState } from 'react';\r\nimport _, { map } from 'underscore';\r\nimport D3Test from './D3Test';\r\nimport FileList from './FileList';\r\nimport PRPDGraph from './PRPDGraph';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport JSZip from 'jszip';\r\nimport saveAs from 'file-saver';\r\nimport './index.css';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  input: {\r\n    padding: 10,\r\n  },\r\n  wrapper: {\r\n    display: \"flex\"\r\n  }\r\n}))\r\n\r\n\r\nfunction App() {\r\n  // const fileInput = useRef()\r\n\r\n  const [prpdData, setPrpdData] = useState([[0, 0, 10], [0, 1, 19], [0, 2, 8], [0, 3, 24], [0, 4, 67], [1, 0, 92], [1, 1, 58], [1, 2, 78], [1, 3, 117], [1, 4, 48], [2, 0, 35], [2, 1, 15], [2, 2, 123], [2, 3, 64], [2, 4, 52], [3, 0, 72], [3, 1, 132], [3, 2, 114], [3, 3, 19], [3, 4, 16], [4, 0, 38], [4, 1, 5], [4, 2, 8], [4, 3, 117], [4, 4, 115], [5, 0, 88], [5, 1, 32], [5, 2, 12], [5, 3, 6], [5, 4, 120], [6, 0, 13], [6, 1, 44], [6, 2, 88], [6, 3, 98], [6, 4, 96], [7, 0, 31], [7, 1, 1], [7, 2, 82], [7, 3, 32], [7, 4, 30], [8, 0, 85], [8, 1, 97], [8, 2, 123], [8, 3, 64], [8, 4, 84], [9, 0, 47], [9, 1, 114], [9, 2, 31], [9, 3, 48], [9, 4, 91]]);\r\n  const [csvData, setCsvData] = useState(``);\r\n  const [data, setData] = useState([1, 2, 3]);\r\n  const [fileList, setFileList] = useState();\r\n\r\n  const handleChangeFile = (e) => {\r\n    const file = e.target.files[0]; //file 입력\r\n    console.log(`file=${file}`)\r\n    if (!file) { return }; // file이 없을 경우 return\r\n    const fileSlice = file.slice(8); // 파일의 Header 8Byte 이후\r\n    const reader = new FileReader(); // FileReader 객체 생성\r\n    reader.readAsArrayBuffer(fileSlice); // 파일 Read\r\n    reader.onload = () => {  // 파일을 다읽게 되면 콜백\r\n      // const data = reader.result;\r\n      // // const dataSub = data.substr(8); // 헤더 8byte 자르기\r\n      // console.log(dataSub.length);\r\n      // let dataSubArray = dataSub.split('');\r\n      // console.log(`dataSub Array =${dataSubArray}`);\r\n      // let buffer= new ArrayBuffer(dataSubArray.length);\r\n      // let view = new DataView(buffer)\r\n\r\n      const buffer = reader.result;\r\n      const view = new DataView(buffer);\r\n      const prpdDataRow = [];\r\n      for (let index = 0; index < 65536; index++) {\r\n        const data = view.getUint16((index * 2), false);\r\n        prpdDataRow.push(data);\r\n      }\r\n\r\n      setData(prpdDataRow);\r\n\r\n\r\n\r\n      // const prpdData = [];\r\n      // while (prpdDataRow.length) prpdData.push(prpdDataRow.splice(0, 256));\r\n      // // console.log(`PRPDData=${prpdData}`);\r\n      // const prpd = _.unzip(prpdData)\r\n\r\n      // let chartData = [];\r\n\r\n      // for (let index = 0; index < prpd.length; index++) {\r\n      //   const buffer = prpd[index];\r\n      //   for (let j = 0; j < prpd[index].length; j++) {\r\n      //     chartData.push([j, index, buffer[j]]);\r\n      //   }\r\n      // }\r\n\r\n      // // var csv = chartData.map(function (d) {\r\n      // //   return d.join();\r\n      // // }).join('\\n');\r\n      // // csv = `y,x,value\\n` + csv;\r\n      // // // console.log(csv);\r\n      // // setCsvData(csv);\r\n      // setPrpdData(chartData);\r\n    };\r\n  }\r\n\r\n  const handleChangeFolder = (e) => {\r\n    console.log(`handleChangeFolder=${e.target.files.length}`);\r\n    setFileList(e.target.files);\r\n  }\r\n\r\n  const readFile = (file) => {\r\n    console.log(`file=${file}`);\r\n    if (!file) { return }; // file이 없을 경우 return\r\n    const fileSlice = file.slice(8); // 파일의 Header 8Byte 이후\r\n    const reader = new FileReader(); // FileReader 객체 생성\r\n    reader.readAsArrayBuffer(fileSlice); // 파일 Read\r\n    reader.onload = () => {  // 파일을 다읽게 되면 콜백\r\n\r\n      const buffer = reader.result;\r\n      const view = new DataView(buffer);\r\n      const prpdDataRow = [];\r\n      for (let index = 0; index < 65536; index++) {\r\n        const data = view.getUint16((index * 2), false);\r\n        prpdDataRow.push(data);\r\n      }\r\n      setData(prpdDataRow);\r\n    };\r\n  }\r\n\r\n  const SaveFile = () => {\r\n    const zip = new JSZip();\r\n    zip.file(\"Hello.txt\", \"Hello World\\n\");\r\n    zip.folder(\"images\");\r\n    zip.generateAsync({ type: \"blob\" })\r\n      .then((blob) => { saveAs(blob, \"test.zip\"); })\r\n\r\n\r\n  }\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"bg-blue-500 text-white m-1 p-1\">PRPD to CSV</h1>\r\n      <div className={classes.input}>\r\n        <label className=\"bg-blue-500 m-1 p-1 hover:bg-blue-700 text-white font-bold py-1 px-4 rounded\">\r\n          Upload Folder\r\n          <input type=\"file\" onChange={handleChangeFolder} id=\"folder-upload\" name=\"folder[]\" webkitdirectory=\"\" directory=\"\" hidden />\r\n        </label>\r\n        <button className=\"bg-blue-500 m-1 p-1 hover:bg-blue-700 text-white font-bold py-1 px-4 rounded\" onClick={SaveFile}>Download</button>\r\n      </div>\r\n      <div className={classes.wrapper}>\r\n        <FileList data={fileList} readFile={readFile}></FileList>\r\n        <PRPDGraph data={data} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}